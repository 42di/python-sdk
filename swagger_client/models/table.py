# coding: utf-8

"""
    42di API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@42docs.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Table(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'team_id': 'str',
        'project_id': 'str',
        'title': 'str',
        'description': 'str',
        'schema': 'str',
        'schema_extra': 'str',
        'owners': 'list[str]',
        'creator': 'str',
        'created': 'datetime',
        'last_modified': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'team_id': 'team_id',
        'project_id': 'project_id',
        'title': 'title',
        'description': 'description',
        'schema': 'schema',
        'schema_extra': 'schema_extra',
        'owners': 'owners',
        'creator': 'creator',
        'created': 'created',
        'last_modified': 'last_modified'
    }

    def __init__(self, name=None, team_id=None, project_id=None, title=None, description=None, schema=None, schema_extra=None, owners=None, creator=None, created=None, last_modified=None):  # noqa: E501
        """Table - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._team_id = None
        self._project_id = None
        self._title = None
        self._description = None
        self._schema = None
        self._schema_extra = None
        self._owners = None
        self._creator = None
        self._created = None
        self._last_modified = None
        self.discriminator = None
        self.name = name
        if team_id is not None:
            self.team_id = team_id
        self.project_id = project_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if schema is not None:
            self.schema = schema
        if schema_extra is not None:
            self.schema_extra = schema_extra
        if owners is not None:
            self.owners = owners
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this Table.  # noqa: E501


        :return: The name of this Table.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Table.


        :param name: The name of this Table.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def team_id(self):
        """Gets the team_id of this Table.  # noqa: E501


        :return: The team_id of this Table.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Table.


        :param team_id: The team_id of this Table.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def project_id(self):
        """Gets the project_id of this Table.  # noqa: E501


        :return: The project_id of this Table.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Table.


        :param project_id: The project_id of this Table.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def title(self):
        """Gets the title of this Table.  # noqa: E501


        :return: The title of this Table.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Table.


        :param title: The title of this Table.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Table.  # noqa: E501


        :return: The description of this Table.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Table.


        :param description: The description of this Table.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schema(self):
        """Gets the schema of this Table.  # noqa: E501


        :return: The schema of this Table.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this Table.


        :param schema: The schema of this Table.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def schema_extra(self):
        """Gets the schema_extra of this Table.  # noqa: E501


        :return: The schema_extra of this Table.  # noqa: E501
        :rtype: str
        """
        return self._schema_extra

    @schema_extra.setter
    def schema_extra(self, schema_extra):
        """Sets the schema_extra of this Table.


        :param schema_extra: The schema_extra of this Table.  # noqa: E501
        :type: str
        """

        self._schema_extra = schema_extra

    @property
    def owners(self):
        """Gets the owners of this Table.  # noqa: E501


        :return: The owners of this Table.  # noqa: E501
        :rtype: list[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this Table.


        :param owners: The owners of this Table.  # noqa: E501
        :type: list[str]
        """

        self._owners = owners

    @property
    def creator(self):
        """Gets the creator of this Table.  # noqa: E501


        :return: The creator of this Table.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Table.


        :param creator: The creator of this Table.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this Table.  # noqa: E501


        :return: The created of this Table.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Table.


        :param created: The created of this Table.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_modified(self):
        """Gets the last_modified of this Table.  # noqa: E501


        :return: The last_modified of this Table.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Table.


        :param last_modified: The last_modified of this Table.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Table, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Table):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
