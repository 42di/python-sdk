# coding: utf-8

"""
    42di API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@42docs.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'tag': 'str',
        'location': 'str',
        'content_type': 'str',
        'length': 'int',
        'creator': 'str',
        'created': 'datetime',
        'last_modified': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'tag': 'tag',
        'location': 'location',
        'content_type': 'content_type',
        'length': 'length',
        'creator': 'creator',
        'created': 'created',
        'last_modified': 'last_modified'
    }

    def __init__(self, name=None, tag=None, location=None, content_type=None, length=None, creator=None, created=None, last_modified=None):  # noqa: E501
        """DataFile - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._tag = None
        self._location = None
        self._content_type = None
        self._length = None
        self._creator = None
        self._created = None
        self._last_modified = None
        self.discriminator = None
        self.name = name
        if tag is not None:
            self.tag = tag
        if location is not None:
            self.location = location
        if content_type is not None:
            self.content_type = content_type
        if length is not None:
            self.length = length
        if creator is not None:
            self.creator = creator
        if created is not None:
            self.created = created
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this DataFile.  # noqa: E501


        :return: The name of this DataFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataFile.


        :param name: The name of this DataFile.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tag(self):
        """Gets the tag of this DataFile.  # noqa: E501


        :return: The tag of this DataFile.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DataFile.


        :param tag: The tag of this DataFile.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def location(self):
        """Gets the location of this DataFile.  # noqa: E501


        :return: The location of this DataFile.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DataFile.


        :param location: The location of this DataFile.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def content_type(self):
        """Gets the content_type of this DataFile.  # noqa: E501


        :return: The content_type of this DataFile.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DataFile.


        :param content_type: The content_type of this DataFile.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def length(self):
        """Gets the length of this DataFile.  # noqa: E501


        :return: The length of this DataFile.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this DataFile.


        :param length: The length of this DataFile.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def creator(self):
        """Gets the creator of this DataFile.  # noqa: E501


        :return: The creator of this DataFile.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DataFile.


        :param creator: The creator of this DataFile.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def created(self):
        """Gets the created of this DataFile.  # noqa: E501


        :return: The created of this DataFile.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DataFile.


        :param created: The created of this DataFile.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def last_modified(self):
        """Gets the last_modified of this DataFile.  # noqa: E501


        :return: The last_modified of this DataFile.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DataFile.


        :param last_modified: The last_modified of this DataFile.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
