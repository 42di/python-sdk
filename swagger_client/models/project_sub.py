# coding: utf-8

"""
    42di API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@42docs.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectSub(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'team_id': 'str',
        'project_id': 'str',
        'subscriber': 'str',
        'expire_at': 'str',
        'created': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'team_id': 'team_id',
        'project_id': 'project_id',
        'subscriber': 'subscriber',
        'expire_at': 'expire_at',
        'created': 'created'
    }

    def __init__(self, id=None, team_id=None, project_id=None, subscriber=None, expire_at=None, created=None):  # noqa: E501
        """ProjectSub - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._team_id = None
        self._project_id = None
        self._subscriber = None
        self._expire_at = None
        self._created = None
        self.discriminator = None
        self.id = id
        self.team_id = team_id
        self.project_id = project_id
        self.subscriber = subscriber
        self.expire_at = expire_at
        self.created = created

    @property
    def id(self):
        """Gets the id of this ProjectSub.  # noqa: E501


        :return: The id of this ProjectSub.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectSub.


        :param id: The id of this ProjectSub.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def team_id(self):
        """Gets the team_id of this ProjectSub.  # noqa: E501


        :return: The team_id of this ProjectSub.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this ProjectSub.


        :param team_id: The team_id of this ProjectSub.  # noqa: E501
        :type: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")  # noqa: E501

        self._team_id = team_id

    @property
    def project_id(self):
        """Gets the project_id of this ProjectSub.  # noqa: E501


        :return: The project_id of this ProjectSub.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectSub.


        :param project_id: The project_id of this ProjectSub.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def subscriber(self):
        """Gets the subscriber of this ProjectSub.  # noqa: E501


        :return: The subscriber of this ProjectSub.  # noqa: E501
        :rtype: str
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this ProjectSub.


        :param subscriber: The subscriber of this ProjectSub.  # noqa: E501
        :type: str
        """
        if subscriber is None:
            raise ValueError("Invalid value for `subscriber`, must not be `None`")  # noqa: E501

        self._subscriber = subscriber

    @property
    def expire_at(self):
        """Gets the expire_at of this ProjectSub.  # noqa: E501


        :return: The expire_at of this ProjectSub.  # noqa: E501
        :rtype: str
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this ProjectSub.


        :param expire_at: The expire_at of this ProjectSub.  # noqa: E501
        :type: str
        """
        if expire_at is None:
            raise ValueError("Invalid value for `expire_at`, must not be `None`")  # noqa: E501

        self._expire_at = expire_at

    @property
    def created(self):
        """Gets the created of this ProjectSub.  # noqa: E501


        :return: The created of this ProjectSub.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProjectSub.


        :param created: The created of this ProjectSub.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectSub, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSub):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
