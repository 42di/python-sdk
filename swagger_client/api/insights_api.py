# coding: utf-8

"""
    42di API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@42docs.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InsightsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_insight(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Delete Insight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_insight(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_insight_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_insight_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
            return data

    def delete_insight_with_http_info(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Delete Insight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_insight_with_http_info(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'project_id', 'insight_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `delete_insight`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_insight`")  # noqa: E501
        # verify the required parameter 'insight_id' is set
        if ('insight_id' not in params or
                params['insight_id'] is None):
            raise ValueError("Missing the required parameter `insight_id` when calling `delete_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['team_id'] = params['team_id']  # noqa: E501
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'insight_id' in params:
            path_params['insight_id'] = params['insight_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_id}/projects/{project_id}/insights/{insight_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insight(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Get Insight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :return: Insight
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insight_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insight_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
            return data

    def get_insight_with_http_info(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Get Insight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insight_with_http_info(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :return: Insight
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'project_id', 'insight_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `get_insight`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `get_insight`")  # noqa: E501
        # verify the required parameter 'insight_id' is set
        if ('insight_id' not in params or
                params['insight_id'] is None):
            raise ValueError("Missing the required parameter `insight_id` when calling `get_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['team_id'] = params['team_id']  # noqa: E501
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'insight_id' in params:
            path_params['insight_id'] = params['insight_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_id}/projects/{project_id}/insights/{insight_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Insight',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_insights(self, team_id, project_id, **kwargs):  # noqa: E501
        """List Insights  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_insights(team_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :return: list[Insight]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_insights_with_http_info(team_id, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_insights_with_http_info(team_id, project_id, **kwargs)  # noqa: E501
            return data

    def list_insights_with_http_info(self, team_id, project_id, **kwargs):  # noqa: E501
        """List Insights  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_insights_with_http_info(team_id, project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :return: list[Insight]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_insights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `list_insights`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `list_insights`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['team_id'] = params['team_id']  # noqa: E501
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_id}/projects/{project_id}/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Insight]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_insight(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Update Insight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_insight(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :param Insight body: The **Insight** object will be updated/created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_insight_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_insight_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
            return data

    def update_insight_with_http_info(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Update Insight  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_insight_with_http_info(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :param Insight body: The **Insight** object will be updated/created.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'project_id', 'insight_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_insight" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_insight`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_insight`")  # noqa: E501
        # verify the required parameter 'insight_id' is set
        if ('insight_id' not in params or
                params['insight_id'] is None):
            raise ValueError("Missing the required parameter `insight_id` when calling `update_insight`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['team_id'] = params['team_id']  # noqa: E501
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'insight_id' in params:
            path_params['insight_id'] = params['insight_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_id}/projects/{project_id}/insights/{insight_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_insight_property(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Update Insight property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_insight_property(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :param PatchAction body: PATCH Action
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_insight_property_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_insight_property_with_http_info(team_id, project_id, insight_id, **kwargs)  # noqa: E501
            return data

    def update_insight_property_with_http_info(self, team_id, project_id, insight_id, **kwargs):  # noqa: E501
        """Update Insight property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_insight_property_with_http_info(team_id, project_id, insight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_id: the **Team** identity (required)
        :param str project_id: the **Project** identity (required)
        :param str insight_id: the **Insight** identity (required)
        :param PatchAction body: PATCH Action
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'project_id', 'insight_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_insight_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `update_insight_property`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `update_insight_property`")  # noqa: E501
        # verify the required parameter 'insight_id' is set
        if ('insight_id' not in params or
                params['insight_id'] is None):
            raise ValueError("Missing the required parameter `insight_id` when calling `update_insight_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['team_id'] = params['team_id']  # noqa: E501
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'insight_id' in params:
            path_params['insight_id'] = params['insight_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{team_id}/projects/{project_id}/insights/{insight_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
